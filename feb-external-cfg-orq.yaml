logging:
  level:
    root: WARN
    com.veradat: INFO
    org.springframework: ERROR
    org.hibernate: ERROR
  pattern:
    console: '%d %-5level [%logger ]: %msg%n'

spring:
  cloud:
    loadbalancer:
      configurations: health-check
      eager-load:
        clients: feb-cfg-proc,feb-watchlist-proc,feb-privatelist-proc,feb-catalogs,feb-enquery-proc,feb-alerts-proc
      health-check:
        refetch-instances-interval: 30s
        refetch-instances: true
        path:
          default: /veradat-actuator/health

management:
  endpoint:
    logfile:
      enabled: true
    health:
      show-components: ALWAYS
  endpoints:
    web:
      exposure:
        include: health,info,metrics,logfile
      base-path: /veradat-actuator
  health:
    defaults:
      enabled: false
    rabbit:
      enabled: true
    redis:
      enabled: true

### Configuracion que no debe ir en el configuration service
jwt:
  secret: $Pasdwew45sdf

centralNode : Veradat

veradat:
  microserviceId: FECO
  rest:
    #Generales
    client: webclient #parametros v√°lidos [webclient,httpClient,restclient]
    validate-certs: true
    keystore:
    keystorePassword: notifiercert
    tlsVersion: TLSv1.2
    check_after_inactivity_ms: 9000 #timeout para obtener la conexion con el servidor
    times_to_retry_on_error: 3
    time_to_retry_on_status_error_ms: 3000
    maxRateLimit: 100
    initialRateLimit: 20
    timeout: 12000 #timeout para las respuesta del server
    responseTime_ms: 5000 # especifica el tiempo promedio en que se espera la respuesta del servidor
    conn_timeout: 15000
    #Especificos para webClient
    crt: /etc/crt
    key: /etc/keyv
    request_max_avg: 10
    request_max_pending_on_queue: 100
    request_pending_on_queue_timeout_ms: 10000

  restClients:
    - name: GET_ALL_NODES
      controller: feb-cfg-proc
      path: /api/v1/cfg/node
      method: GET

    - name: GET_COUNT_RECORDS_WL
      controller: feb-watchlist-proc
      path: /api/v1/watchlist/records
      method: GET

    - name: GET_COUNT_RECORDS_PL
      controller: feb-privatelist-proc
      path: /api/v1/privatelist/originType/all/record/count
      method: GET

    - name: VALIDATE_INSTITUTION
      controller: feb-catalogs
      path: /api/v1/catalogs/institutions/validate/BNK/{code}
      method: GET

    - name: GET_COUNT_RECORDS_EQ
      controller: feb-enquery-proc
      path: /api/v1/enquery/history/records/count
      method: GET

    - name: GET_COUNT_RECORDS_ALERT
      controller: feb-alerts-proc
      path: /api/v1/alerts/history/records/count
      method: GET

    - name: GET_CATALOG_ITEM_LIST
      controller: feb-catalogs
      path: /api/v2/catalog/{catalogName}/items
      method: GET
    
    - name: GET-CATALOGS
      controller: feb-catalogs
      path: /api/v2/catalogs?operationArea={operationArea}&includeItems={includeItems}
      method: GET
    
    - name: DELETE-CATALOGS-REDIS
      controller: feb-catalogs
      path: /api/v2/catalogs/redis/delete
      method: POST

  security:
    permissions:
      disabled: false
  broker-messages:
    messageBroker: rabbitmq
    global:
      reprocessQueue: vdt_general_reprocess_queue
      dlqQueue: vdt_general_dlq_queue
      securityEventQueue: vdt_security_event_queue
      output:
        queues: ## Formato veradat.{dominio_operacion}.{tipo_elemento} Ejemplo {dominio_operacion}=hexagonal_example-out
          - create: feb.node-config_create.queue
          - update: feb.node-config_update.queue
      input:
        queues:
    rabbitmq:
      general:
        reprocessRoutingKey: vdt.general_reprocess_queue.routingkey
        reprocessExchange: veradat.general.exchange
        dlqRoutingKey: vdt.general_dlq_queue.routingkey
        dlqExchange: veradat.general.exchange
        securityEventRoutingKey: vdt.security_event.routingkey
        securityExchange: veradat.security.exchange
      output:
        queues:
          - name: CREATE_NODE
            queue: feb.node-config_create.queue
            exchange: feb.node-config.exchange
            routingKey: feb.node-config_create.routing_key
          - name: UPDATE_NODE
            queue: feb.node-config_update.queue
            exchange: feb.node-config.exchange
            routingKey: feb.node-config_update.routing_key
          - name: SEND_RESULT
            queue: feb.node-config_send-result.queue
            exchange: feb.node-config.exchange
            routingKey: feb.node-config_send-result.routing_key
          - name: VERADAT-NODE-CFG-SAVE-CATALOG-ITEM
            queue: feb.node-config_save-catalog-item.queue
            exchange: feb.node-config.exchange
            routingKey: feb.node-config_save-catalog-item.routing_key
      reply:
        timeout: 60000
        maxAttempts: 3
        interval: 3000
      concurrent:
        consumers: 1
      max:
        block:
          ms: 15000
        concurrent:
          consumers: 1
      missingQueuesFatal: false
      recoveryInitialInterval: 30000
      recoveryMultiplierInterval: 2
      recoveryMaxInterval: 120000
      heartbeat: 60
      networkRecoveryInterval: 60
      channelCacheSize: 25
      ssl:
        keyStoreType: jks
        trustStoreType: jks
        skipServerCertificateValidation: false
        sslAlgorithm: TLSv1.2
