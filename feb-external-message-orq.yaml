spring:    
  data:
    redis:
      repositories:
        enabled: false
  cloud:
    loadbalancer:
      configurations: health-check
      eager-load:
        clients: feb-message-proc,feb-privatekey-proc,veradat-feb-node-security-users-proc
      health-check:
        refetch-instances-interval: 30s
        refetch-instances: true
        path:
          default: /veradat-actuator/health


logging:
  #file.name: '/logs/${spring.application.name:}.log'
  level:
    root: WARN
    com.veradat: INFO
    org.springframework: ERROR
    org.hibernate: ERROR
  pattern:
    #level: '%5p[${spring.application.name:},%X{traceId:-},%X{spanId:-}]'
    console: '%d %-5level [%thread] [%logger ]: %msg%n'
    #file: '%d %-5level [%thread] [%logger] : %msg%n'

management:
  endpoint:
    logfile:
      enabled: true
    health:
      show-components: ALWAYS
  endpoints:
    web:
      exposure:
        include: health,info,metrics,logfile
      base-path: /veradat-actuator
  health:
    defaults:
      enabled: false
    rabbit:
      enabled: false
    redis:
      enabled: true
    db:
      enabled: true


veradat:
  microserviceId: FEMO
  rest:
    #Generales
    client: webclient
    validate-certs: true
    keystore:
    keystorePassword: notifierqa
    tlsVersion: TLSv1.2
    check_after_inactivity_ms: 9000 #timeout para obtener la conexion con el servidor
    times_to_retry_on_error: 3
    time_to_retry_on_status_error_ms: 3000
    maxRateLimit: 10
    initialRateLimit: 5
    timeout: 50000 #timeout para las respuesta del server
    responseTime_ms: 10000 # especifica el tiempo promedio en que se espera la respuesta del servidor
    conn_timeout: 15000
    request_max_avg: 10
    request_max_pending_on_queue: 100 
    request_pending_on_queue_timeout_ms: 10000 
    #Especificos para webClient
    crt: /etc/crt
    key: /etc/key

  security:
    permissions:
      disabled: false
  constants:
    email-tamplate: NFSOIF
    business-key-email-send-user: FBSPV
    endpoint-veradat-login: https://web1.febnode.qa.veradat.mx/
    subject-message: Tienes un mensaje nuevo
  broker-messages:
    global:
      reprocessQueue: vdt_general_reprocess_queue
      dlqQueue: vdt_general_dlq_queue
      securityEventQueue: vdt_security_event_queue
    rabbitmq:
      general:
        reprocessRoutingKey: vdt.general_reprocess_queue.routingkey
        reprocessExchange: veradat.general.exchange
        dlqRoutingKey: vdt.general_dlq_queue.routingkey
        dlqExchange: veradat.general.exchange
        securityEventRoutingKey: vdt.security_event.routingkey
        securityExchange: veradat.security.exchange

      reply:
        timeout: 60000
        maxAttempts: 3
        interval: 3000
      concurrent:
        consumers: 1
      max:
        concurrent:
          consumers: 2
      missingQueuesFatal: false
      recoveryInitialInterval: 30000
      recoveryMultiplierInterval: 2
      recoveryMaxInterval: 120000
      heartbeat: 60
      networkRecoveryInterval: 60
      channelCacheSize: 25
      ssl:
        keyStoreType: jks
        trustStoreType: jks
        skipServerCertificateValidation: false
        sslAlgorithm: TLSv1.2

      input:
        queues:
          get-deciphered-message: feb.message_get-deciphered-message.queue
          get-deciphered-file: feb.message_get-deciphered-file.queue
      output:
        queues:
          - name: PERSIST_MESSAGE
            queue: feb.message_persist-message.queue
            exchange: feb.message.exchange
            routingKey: feb.message_persist-message.routing_key
          - name: PERSIST_FILE
            queue: feb.message_persist-file.queue
            exchange: feb.message.exchange
            routingKey: feb.message_persist-file.routing_key
          - name: DECIPHER_MESSAGE
            queue: feb.message_decipher-message.queue
            exchange: feb.message.exchange
            routingKey: feb.message_decipher-message.routing_key
          - name: DECIPHER_FILE
            queue: feb.message_decipher-file.queue
            exchange: feb.message.exchange
            routingKey: feb.message_decipher-file.routing_key
          - name: PERSIST_STATUS
            queue: feb.message_persist-status.queue
            exchange: feb.message.exchange
            routingKey: feb.message_persist-status.routing_key
          - name: SET_ORIGIN_INSTITUTION
            queue: feb.message_set-origin-institution.queue
            exchange: feb.message.exchange
            routingKey: feb.message_set-origin-institution.routing_key
          #Envio SFTP
          - name: SFTP_UPLOAD_FILE
            queue: feb.general_sftp-upload-file.queue
            exchange: feb.batch-general.exchange
            routingKey: feb.general_sftp-upload-file.routing_key
          #Envio SMTP
          - name: SMTP_SEND_MAIL
            queue: feb.general_smtp-send-mail.queue
            exchange: feb.batch-general.exchange
            routingKey: feb.general_smtp-send-mail.routing_key
          - name: PERSIST_ANONYMITY
            queue: feb.message_persist-anonymity.queue
            exchange: feb.message.exchange
            routingKey: feb.message_persist-anonymity.routing_key
          - name: PERSIST_ENQUERY_ORIGIN_NODE
            queue: feb.enquery_update-hit-origin-node-id.queue
            exchange: feb.enquery.exchange
            routingKey: feb.enquery_update-hit-origin-node-id.routing_key
          - name: PERSIST_ALERT_ORIGIN_NODE
            queue: feb.alerts_update-node-alias.queue
            exchange: feb.alerts.exchange
            routingKey: feb.alerts_update-node-alias.routing_key
          - name: GET_PUBLIC_KEY
            queue: feb.message_get-public-key.queue
            exchange: feb.message.exchange
            routingKey: feb.message_get-public-key.routing_key


  restclients:
    - name: GET_USERS
      controller: veradat-feb-node-security-users-proc
      path: /api/v1/users/all/filter
      method: POST
    - name: GET_PRIVATE_KEY
      controller: feb-privatekey-proc
      path: /api/v1/message/private-key
      method: GET
    - name: GET_CONVERSATION_BY_ID
      controller: feb-message-proc
      path: /api/v1/message/conversation/{conversationId}
      method: GET  

jwt:
  secret: $Pasdwew45sdf